/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.SkinnedMesh;
    Cube001: THREE.SkinnedMesh;
    Cube002_1: THREE.SkinnedMesh;
    Cube002_2: THREE.SkinnedMesh;
    Cube002_3: THREE.SkinnedMesh;
    Cube003_1: THREE.SkinnedMesh;
    Cube003_2: THREE.SkinnedMesh;
    Cube004_1: THREE.SkinnedMesh;
    Cube004_2: THREE.SkinnedMesh;
    Bone: THREE.Bone;
  };
  materials: {
    white: THREE.MeshStandardMaterial;
    ['redl.001']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
  };
};

type ActionName = 'EmptyAction' | 'ArmatureAction';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    '/3d-models/fighter/footballPlayer.glb'
  ) as GLTFResult;
  const { actions } = useAnimations<GLTFActions>(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <group
          name='Empty'
          position={[0, -0.02, 5.07]}
          rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        />
        <group name='Armature' position={[0, 2.43, -0.03]}>
          <primitive object={nodes.Bone} />
          <skinnedMesh
            name='Cube'
            geometry={nodes.Cube.geometry}
            material={materials.white}
            skeleton={nodes.Cube.skeleton}
          />
          <skinnedMesh
            name='Cube001'
            geometry={nodes.Cube001.geometry}
            material={materials['redl.001']}
            skeleton={nodes.Cube001.skeleton}
          />
          <group name='Cube002'>
            <skinnedMesh
              name='Cube002_1'
              geometry={nodes.Cube002_1.geometry}
              material={materials['Material.001']}
              skeleton={nodes.Cube002_1.skeleton}
            />
            <skinnedMesh
              name='Cube002_2'
              geometry={nodes.Cube002_2.geometry}
              material={materials.white}
              skeleton={nodes.Cube002_2.skeleton}
            />
            <skinnedMesh
              name='Cube002_3'
              geometry={nodes.Cube002_3.geometry}
              material={materials.black}
              skeleton={nodes.Cube002_3.skeleton}
            />
          </group>
          <group name='Cube003'>
            <skinnedMesh
              name='Cube003_1'
              geometry={nodes.Cube003_1.geometry}
              material={materials['redl.001']}
              skeleton={nodes.Cube003_1.skeleton}
            />
            <skinnedMesh
              name='Cube003_2'
              geometry={nodes.Cube003_2.geometry}
              material={materials.white}
              skeleton={nodes.Cube003_2.skeleton}
            />
          </group>
          <group name='Cube004'>
            <skinnedMesh
              name='Cube004_1'
              geometry={nodes.Cube004_1.geometry}
              material={materials['redl.001']}
              skeleton={nodes.Cube004_1.skeleton}
            />
            <skinnedMesh
              name='Cube004_2'
              geometry={nodes.Cube004_2.geometry}
              material={materials.white}
              skeleton={nodes.Cube004_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/footballPlayer.glb');
